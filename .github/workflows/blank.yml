name: Sync Bundle to RBC Repo

on:
  push:
    paths:
      - 'path/to/bundle/files/**'

jobs:
  determine-branches:
    runs-on: ubuntu-latest
    outputs:
      latest_branch: ${{ steps.set-branches.outputs.latest_branch }}
      previous_branch: ${{ steps.set-branches.outputs.previous_branch }}
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Authenticate with GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.BUNDLE_SYNC_TOKEN }}"
        env:
          BUNDLE_SYNC_TOKEN: ${{ secrets.BUNDLE_SYNC_TOKEN }}

      - name: Get RHOAI Branches
        id: get-branches
        run: |
          branches=$(gh repo view https://github.com/DevOps-automation-tasks/rhods-operator.git --json refs --jq '.refs | map(select(.name | test("rhoai-\\d+\\.\\d+$"))) | sort_by(.name) | reverse | map(.name)')
          echo "::set-output name=branches::$branches"

      - name: Set Latest and Previous Branches
        id: set-branches
        run: |
          branches=${{ steps.get-branches.outputs.branches }}
          latest_branch=$(echo $branches | jq -r '.[0]')
          previous_branch=$(echo $branches | jq -r '.[1]')
          echo "::set-output name=latest_branch::$latest_branch"
          echo "::set-output name=previous_branch::$previous_branch"

  sync-bundle:
    needs: determine-branches
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: [${{ needs.determine-branches.outputs.latest_branch }}, ${{ needs.determine-branches.outputs.previous_branch }}]

    steps:
      - name: Checkout Operator Repo
        uses: actions/checkout@v3
        with:
          repository: https://github.com/DevOps-automation-tasks/rhods-operator.git
          ref: ${{ matrix.branch }}

      - name: Checkout RBC Repo
        uses: actions/checkout@v3
        with:
          repository: https://github.com/DevOps-automation-tasks/RHOAI-Build-Config.git
          path: rbc-repo

      - name: Remove unnecessary fields from CSV files
        run: |
          find path/to/bundle/files -name '*.clusterserviceversion.yaml' | while read csv; do
            yq eval 'del(.spec.channels, .spec.defaultChannel, .spec.replaces, .spec.skipRange)' -i "$csv"
          done

      - name: Sync bundle files to RBC Repo
        run: |
          cd rbc-repo
          git checkout ${{ matrix.branch }}

          # Sync the CSV, metadata, and CRDs
          rsync -av --delete ../path/to/bundle/files/ bundle/

          # Retain the current image digests
          yq eval '.spec.install.spec.deployments[] |= (.spec.template.spec.containers[] |= (.image = input_image))' -i $(find bundle -name '*.clusterserviceversion.yaml')

          # Sync the Dockerfile and overwrite it
          cp ../path/to/bundle/files/Dockerfile bundle/

          git add .
          git commit -m "Sync bundle from operator repo for ${{ matrix.branch }}"
          git push origin ${{ matrix.branch }}

      - name: Create Pull Request to RBC Repo
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.BUNDLE_SYNC_TOKEN }}
          branch: sync-bundle-${{ matrix.branch }}
          title: "Sync bundle from operator repo for ${{ matrix.branch }}"
          body: "This PR syncs the bundle files from the operator repo."
          base: ${{ matrix.branch }}
