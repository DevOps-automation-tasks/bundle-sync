name: Sync Bundle to RBC Repo

on:
  push:
    paths:
      - 'path/to/bundle/files/**'
  workflow_dispatch: # Allows the workflow to be triggered manually

jobs:
  determine-branches:
    runs-on: ubuntu-latest
    outputs:
      latest_branch: ${{ steps.set-branches.outputs.latest_branch }}
      previous_branch: ${{ steps.set-branches.outputs.previous_branch }}
    steps:
      - name: Install GitHub CLI and jq
        run: sudo apt-get install -y gh jq

      - name: Authenticate with GitHub CLI
        run: echo "${{ secrets.BUNDLE_SYNC_TOKEN }}" | gh auth login --with-token
        env:
          BUNDLE_SYNC_TOKEN: ${{ secrets.BUNDLE_SYNC_TOKEN }}

      - name: Get and Sort RHOAI Branches
        id: get-branches
        run: |
          branches=$(gh api /repos/DevOps-automation-tasks/rhods-operator/branches --jq '[.[] | select(.name | test("rhoai-\\d+\\.\\d+$")) | .name]')
          
          # Sort the branches numerically by version
          sorted_branches=$(echo "$branches" | jq -r 'sort_by(ltrimstr("rhoai-") | split(".") | map(tonumber)) | reverse | .[:2] | join("\n")')

          echo "Sorted branches:"
          echo "$sorted_branches"

          # Save branches to a file
          echo "$sorted_branches" > branches.txt
          echo "branches_file=branches.txt" >> $GITHUB_ENV

      - name: Set Latest and Previous Branches
        id: set-branches
        run: |
          # Read branches from the file
          sorted_branches=$(cat ${{ env.branches_file }} | tr '\n' ' ')
          
          if [ -z "$sorted_branches" ]; then
            echo "No branches found matching the pattern."
            exit 1
          fi

          # Convert the space-separated list to a bash array
          sorted_branches_array=($sorted_branches)
          
          if [ ${#sorted_branches_array[@]} -lt 2 ]; then
            echo "Not enough branches found."
            exit 1
          fi

          # Parse the array
          latest_branch=${sorted_branches_array[0]}
          previous_branch=${sorted_branches_array[1]}

          echo "Latest branch: $latest_branch"
          echo "Previous branch: $previous_branch"

          # Set outputs using environment files
          echo "latest_branch=$latest_branch" >> $GITHUB_ENV
          echo "previous_branch=$previous_branch" >> $GITHUB_ENV
          echo "::set-output name=latest_branch::$latest_branch"
          echo "::set-output name=previous_branch::$previous_branch"

name: Sync Bundle

on:
  push:
    branches:
      - main

jobs:
  determine-branches:
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.determine.outputs.branches }}
    steps:
      - name: Checkout Operator Repo
        uses: actions/checkout@v3
        with:
          repository: 'DevOps-automation-tasks/rhods-operator'
          path: operator-repo
          token: ${{ secrets.BUNDLE_SYNC_TOKEN }}

      - name: Determine Branches
        id: determine
        run: |
          branches=$(git branch -r | grep -E 'origin/rhoai-[0-9]+\.[0-9]+' | sed 's/origin\///g' | sort -V | tail -n 2)
          echo "::set-output name=branches::${branches}"
        shell: bash

  sync-bundle:
    runs-on: ubuntu-latest
    needs: determine-branches
    steps:
      - name: Checkout RBC Repo
        uses: actions/checkout@v3
        with:
          repository: 'DevOps-automation-tasks/RHOAI-Build-Config'
          path: rbc-repo
          token: ${{ secrets.BUNDLE_SYNC_TOKEN }}

      - name: Verify RBC Repo Checkout
        run: |
          if [ ! -d "rbc-repo" ]; then
            echo "rbc-repo directory does not exist. Exiting."
            exit 1
          fi

      - name: Checkout Operator Repo
        uses: actions/checkout@v3
        with:
          repository: 'DevOps-automation-tasks/rhods-operator'
          path: operator-repo
          token: ${{ secrets.BUNDLE_SYNC_TOKEN }}

      - name: Sync Bundle
        run: |
          cd rbc-repo
          git fetch --all

          branches=(${{ needs.determine-branches.outputs.branches }})
          for branch in "${branches[@]}"; do
            echo "Syncing for branch: $branch"
            
            # Fetch remote branches and check if the branch exists
            if ! git rev-parse --verify --quiet origin/$branch; then
              echo "Branch $branch does not exist on remote. Skipping."
              continue
            fi

            git checkout -b $branch origin/$branch
            
            # Sync the CSV, metadata, and CRDs
            if [ ! -d "../operator-repo/path/to/bundle/files" ]; then
              echo "The path to bundle files does not exist. Skipping."
              continue
            fi

            rsync -av --delete ../operator-repo/path/to/bundle/files/ bundle/
            
            # Retain the current image digests
            yq eval '.spec.install.spec.deployments[] |= (.spec.template.spec.containers[] |= (.image = input_image))' -i $(find bundle -name '*.clusterserviceversion.yaml')
            
            # Sync the Dockerfile and overwrite it
            cp ../operator-repo/path/to/bundle/files/Dockerfile bundle/
            
            git add .
            git commit -m "Sync bundle from operator repo for $branch"
            git push origin $branch
          done


