name: bun1

on:
  push:
    paths:
      - 'bundle/**' # Path to your bundle files
  workflow_dispatch: # Allows the workflow to be triggered manually

jobs:
  sync-bundle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Operator Repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/rhods-operator
          path: operator-repo
          ref: main # Adjust this if you want to sync from a specific branch
        id: checkout-operator-repo

      - name: Checkout RBC Repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/RHOAI-Build-Config
          path: rbc-repo
          fetch-depth: 0 # Fetch all branches
        id: checkout-rbc-repo

      - name: Get and Sort RHOAI Branches
        id: get-branches
        run: |
          cd rbc-repo
          
          # Fetch all branches and filter for rhoai-x.y pattern
          branches_json=$(git branch -r | grep 'origin/rhoai-' | sed 's/origin\///' | jq -R -s -c 'split("\n") | map(select(test("rhoai-\\d+\\.\\d+")))')
          
          # Sort branches by version
          sorted_branches=$(echo "$branches_json" | jq -r 'sort_by(ltrimstr("rhoai-") | split(".") | map(tonumber)) | reverse | .[:2] | join("\n")')
          echo "Filtered branches:"
          echo "$sorted_branches"

          # Save branches to environment variables
          echo "$sorted_branches" > branches.txt
          echo "branches_file=branches.txt" >> $GITHUB_ENV

      - name: Set Latest and Previous Branches
        id: set-branches
        run: |
          # Read branches from the file
          sorted_branches=$(cat ${{ env.branches_file }} | tr '\n' ' ')
          
          if [ -z "$sorted_branches" ]; then
            echo "No branches found matching the pattern."
            exit 1
          fi

          # Convert the space-separated list to a bash array
          sorted_branches_array=($sorted_branches)
          
          if [ ${#sorted_branches_array[@]} -lt 2 ]; then
            echo "Not enough branches found."
            exit 1
          fi

          # Parse the array
          latest_branch=${sorted_branches_array[0]}
          previous_branch=${sorted_branches_array[1]}

          echo "Latest branch: $latest_branch"
          echo "Previous branch: $previous_branch"

          # Set outputs
          echo "::set-output name=latest_branch::$latest_branch"
          echo "::set-output name=previous_branch::$previous_branch"

      - name: Sync Bundle Files
        run: |
          cd rbc-repo
          
          # Sync bundle files for latest and previous branches
          branches=("${{ steps.set-branches.outputs.latest_branch }}" "${{ steps.set-branches.outputs.previous_branch }}")
          
          for branch in "${branches[@]}"; do
            echo "Syncing for branch: $branch"

            # Verify the branch exists in RBC repo
            if git show-ref --verify --quiet refs/heads/$branch; then
              echo "Branch $branch exists in RBC repo. Checking out..."

              # Checkout the branch in RBC repo
              git checkout $branch

              # Sync the bundle files from operator repo
              rsync -av --delete ../operator-repo/bundle/ bundle/

              # Sync the Dockerfile and overwrite it
              cp ../operator-repo/bundle/Dockerfile bundle/

              git add .
              git commit -m "Sync bundle files from operator repo for $branch"
              git push origin $branch
            else
              echo "Branch $branch does not exist in the RBC repo."
            fi
          done

      - name: Create Pull Request to RBC Repo
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.BUNDLE_SYNC_TOKEN }}
          branch: sync-bundle-${{ github.sha }}
          title: "Sync bundle from operator repo"
          body: "This PR syncs the bundle files from the operator repo."
          base: main # Adjust this to the branch where the PR should be merged
