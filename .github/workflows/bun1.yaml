name: Sync Bundle

on:
  push:
    paths:
      - 'bundle/**'
  workflow_dispatch:

jobs:
  sync-bundle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Operator Repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/rhods-operator
          path: operator-repo
          fetch-depth: 0
        id: checkout-operator-repo

      - name: Checkout RBC Repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/RHOAI-Build-Config
          path: rbc-repo
          fetch-depth: 0
        id: checkout-rbc-repo

      - name: Install GitHub CLI and jq
        run: sudo apt-get install -y gh jq

      - name: Determine Branches
        id: determine-branches
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export GH_TOKEN=${GH_TOKEN}

          branches_json=$(gh api /repos/DevOps-automation-tasks/rhods-operator/branches --header "Authorization: token ${GH_TOKEN}")

          branches=$(echo "$branches_json" | jq -r '[.[] | select(.name | test("^rhoai-\\d+\\.\\d+$")) | .name] | sort_by(ltrimstr("rhoai-") | split(".") | map(tonumber)) | reverse | .[:2] | join("\n")')
          echo "Filtered branches:"
          echo "$branches"
          
          echo "$branches" > branches.txt
          echo "branches_file=branches.txt" >> $GITHUB_ENV

      - name: Sync Bundle Changes
        run: |
          sorted_branches=$(cat ${{ env.branches_file }} | tr '\n' ' ')
          
          if [ -z "$sorted_branches" ]; then
            echo "No branches found matching the pattern."
            exit 1
          fi

          sorted_branches_array=($sorted_branches)
          
          if [ ${#sorted_branches_array[@]} -lt 2 ]; then
            echo "Not enough branches found."
            exit 1
          fi

          latest_branch=${sorted_branches_array[0]}
          previous_branch=${sorted_branches_array[1]}

          echo "Latest branch: $latest_branch"
          echo "Previous branch: $previous_branch"

          branches=("${latest_branch}" "${previous_branch}")

          for branch in "${branches[@]}"; do
            echo "Syncing for branch: $branch"
            
            # Navigate to the RBC repo directory
            cd rbc-repo

            # Fetch all branches from the remote
            git fetch origin
            git branch -r

            # Verify the branch exists in the RBC repo
            if git show-ref --verify --quiet refs/heads/$branch; then
              echo "Branch $branch exists in RBC repo. Checking out..."
              git checkout $branch
            else
              echo "Branch $branch does not exist in RBC repo. Creating branch..."
              git checkout -b $branch origin/$branch
            fi

            # Navigate to the operator repo directory
            cd ../operator-repo

            # Fetch all branches from the remote
            git fetch origin
            git branch -r

            # Verify the branch exists in the operator repo
            if git show-ref --verify --quiet refs/heads/$branch; then
              echo "Branch $branch exists in Operator repo. Checking out..."
              git checkout $branch

              # Sync the bundle files from the operator repo
              rsync -av --delete ../operator-repo/bundle/ ../rbc-repo/bundle/

              # Overwrite the Dockerfile
              cp ../operator-repo/bundle/Dockerfile ../rbc-repo/bundle/

              # Navigate back to RBC repo
              cd ../rbc-repo

              git add .
              git commit -m "Sync bundle from operator repo for $branch"
              git push origin $branch
            else
              echo "Branch $branch does not exist in Operator repo."
            fi

            # Navigate back to the root directory
            cd ..
          done
