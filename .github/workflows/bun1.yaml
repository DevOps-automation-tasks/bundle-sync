name: bun1

on:
  push:
    paths:
      - 'bundle/**'
  workflow_dispatch: # Allows the workflow to be triggered manually

jobs:
  sync-bundle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Operator Repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/rhods-operator
          ref: ${{ github.event.head_commit.branch }}  # Fetch changes from the branch of the latest commit
        id: checkout-operator-repo

      - name: Checkout RBC Repo
        uses: actions/checkout@v3
        with:
          repository: DevOps-automation-tasks/RHOAI-Build-Config
          path: rbc-repo
          fetch-depth: 0 # Fetch all branches
        id: checkout-rbc-repo

      - name: Determine Branches
        id: determine-branches
        run: |
          # Get branches from the API
          branches_json=$(gh api /repos/DevOps-automation-tasks/rhods-operator/branches)
          
          # Filter branches that follow the pattern "rhoai-x.y" and sort them
          branches=$(echo "$branches_json" | jq -r '[.[] | select(.name | test("^rhoai-\\d+\\.\\d+$")) | .name] | sort_by(ltrimstr("rhoai-") | split(".") | map(tonumber)) | reverse | .[:2] | join("\n")')
          echo "Filtered branches:"
          echo "$branches"
          
          # Save branches to a file
          echo "$branches" > branches.txt
          echo "branches_file=branches.txt" >> $GITHUB_ENV

      - name: Sync Bundle Changes
        run: |
          # Read branches from the file
          sorted_branches=$(cat ${{ env.branches_file }} | tr '\n' ' ')
          
          if [ -z "$sorted_branches" ]; then
            echo "No branches found matching the pattern."
            exit 1
          fi

          # Convert the space-separated list to a bash array
          sorted_branches_array=($sorted_branches)
          
          if [ ${#sorted_branches_array[@]} -lt 2 ]; then
            echo "Not enough branches found."
            exit 1
          fi

          # Parse the array
          latest_branch=${sorted_branches_array[0]}
          previous_branch=${sorted_branches_array[1]}

          echo "Latest branch: $latest_branch"
          echo "Previous branch: $previous_branch"

          branches=("${latest_branch}" "${previous_branch}")

          for branch in "${branches[@]}"; do
            echo "Syncing for branch: $branch"
            
            # Navigate to the RBC repo directory
            cd rbc-repo

            # Verify the branch exists in the RBC repo
            if git show-ref --verify --quiet refs/heads/$branch; then
              echo "Branch $branch exists. Checking out..."
              git checkout $branch

              # Sync the bundle files from the operator repo
              rsync -av --delete ../bundle/ bundle/

              # Overwrite the Dockerfile
              cp ../bundle/Dockerfile bundle/

              git add .
              git commit -m "Sync bundle from operator repo for $branch"
              git push origin $branch
            else
              echo "Branch $branch does not exist in the RBC repo."
            fi

            # Navigate back to the root directory
            cd ..
          done

      - name: Create Pull Request to RBC Repo
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.BUNDLE_SYNC_TOKEN }}
          branch: sync-bundle-${{ env.latest_branch }}
          title: "Sync bundle from operator repo for ${{ env.latest_branch }}"
          body: "This PR syncs the bundle files from the operator repo."
          base: ${{ env.latest_branch }}
